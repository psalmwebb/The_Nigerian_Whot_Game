[{"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\index.js":"1","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\App.js":"2","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\playGround.js":"3","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\contexts\\cardContext.js":"4","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\cardStore.js":"5","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\playArea.js":"6","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\cardHolder.js":"7","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\utils\\utils.js":"8","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\card.js":"9","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\home.js":"10","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\contexts\\socketContext.js":"11","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\cardPicker.js":"12","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\score.js":"13","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\alert.js":"14"},{"size":230,"mtime":1623166965407,"results":"15","hashOfConfig":"16"},{"size":664,"mtime":1623337844253,"results":"17","hashOfConfig":"16"},{"size":5844,"mtime":1626867468203,"results":"18","hashOfConfig":"16"},{"size":6782,"mtime":1626803677457,"results":"19","hashOfConfig":"16"},{"size":2777,"mtime":1626785336240,"results":"20","hashOfConfig":"16"},{"size":1476,"mtime":1626787462753,"results":"21","hashOfConfig":"16"},{"size":2566,"mtime":1626848891825,"results":"22","hashOfConfig":"16"},{"size":5387,"mtime":1626805017327,"results":"23","hashOfConfig":"16"},{"size":6961,"mtime":1626847172250,"results":"24","hashOfConfig":"16"},{"size":2220,"mtime":1626866764139,"results":"25","hashOfConfig":"16"},{"size":3070,"mtime":1626866029998,"results":"26","hashOfConfig":"16"},{"size":1002,"mtime":1623626642011,"results":"27","hashOfConfig":"16"},{"size":618,"mtime":1623652761831,"results":"28","hashOfConfig":"16"},{"size":832,"mtime":1626804653327,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16o8ehz",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\index.js",[],"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\App.js",[],"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\playGround.js",["64","65","66"],"import {playGroundStyle} from \"../css/playground.module.css\"\r\nimport CardHolder from \"./cardHolder\"\r\nimport CardStore from \"./cardStore\"\r\nimport {CardContext} from \"../contexts/cardContext\"\r\nimport PlayArea from \"./playArea\"\r\nimport CardPicker from \"./cardPicker\"\r\nimport Score from \"./score\"\r\n// import { CardContext } from \"../contexts/cardContext\"\r\nimport {useContext,useEffect,useState,useRef} from \"react\"\r\nimport { SocketContext } from \"../contexts/socketContext\"\r\nimport Alert from \"./alert\"\r\n\r\nexport default function PlayGround({history:{push}}) {\r\n    \r\n    const {gameState,alertMessage,setPlayerTurns,hasGameEnd,setHasGameEnd,gameMode,setScores,\r\n           setCanShare,showCardPicker,setCardStore,\r\n           unSetGameState,initCardObj} = useContext(CardContext)\r\n    const {socket,socketId,isHost} = useContext(SocketContext)\r\n    const [multiConn,setMultiConn] = useState(false)\r\n\r\n      if(gameMode === null){\r\n        push(\"/\")\r\n      }\r\n\r\n    useEffect(()=>{\r\n\r\n      if(gameMode === \"multi-player\"){\r\n        if(isHost === \"host\"){\r\n          console.log(\"Multi-Player and hosting\")\r\n          sendCardStoreToRemote.current()\r\n        }\r\n        else{\r\n          console.log(\"Multi-Player and joining\")\r\n          receiveCardStoreFromHost.current()\r\n        }\r\n      }\r\n      else{\r\n        console.log(\"Single player!\")\r\n\r\n        setCardStore().then(()=>{\r\n          setCanShare(true)\r\n        })\r\n      }\r\n\r\n      return ()=>{\r\n        unSetGameState()\r\n     }\r\n\r\n    },[isHost,gameMode])\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n      if(gameState.me.length === 0 && gameState.playArea.length !== 0){\r\n         \r\n          setHasGameEnd(true)\r\n          setTimeout(()=>{\r\n             setScores((prevScores)=>{\r\n                 let newScores = [...prevScores]\r\n                 newScores[0]+=1\r\n                 return newScores\r\n             })\r\n          },500)\r\n\r\n          setTimeout(()=>{\r\n             unSetGameState()\r\n\r\n          },1500)\r\n\r\n        //  if(gameMode === \"multi-player\"){\r\n        //     socket.emit('update-scores',[1,0])\r\n        //  }\r\n      }\r\n      else if(gameState.otherPlayer.length === 0 && gameState.playArea.length !== 0){\r\n           setHasGameEnd(true)\r\n           setTimeout(()=>{\r\n              setScores((prevScores)=>{\r\n                  let newScores = [...prevScores]\r\n                  newScores[1]+=1\r\n                  return newScores\r\n              })\r\n           },500)\r\n\r\n           setTimeout(()=>{\r\n            unSetGameState()\r\n           },1500)\r\n\r\n      }\r\n  },[gameState])\r\n\r\n    useEffect(()=>{\r\n\r\n      let hostCardStore,remoteCardStore;\r\n\r\n      if(hasGameEnd){\r\n        console.log(\"Game Started...\")\r\n        console.log(gameMode)\r\n        setTimeout(()=>{\r\n          if(gameMode === \"multi-player\"){\r\n              if(isHost === \"host\"){\r\n              [hostCardStore,remoteCardStore] = cardsForRemoteAndHost()\r\n\r\n                socket.emit(\"send-cards-to-remote\",remoteCardStore)\r\n\r\n                socket.on(\"remote-receive-cards\",message=>{\r\n                  console.log(message)\r\n     \r\n                  setCardStore(hostCardStore).then(()=>{\r\n                     setCanShare(true)\r\n                     setHasGameEnd(false)\r\n                    //  setPlayerTurns(\"me\")\r\n                  })\r\n               })\r\n            }\r\n          }\r\n          else if(gameMode === \"single player\"){\r\n\r\n            console.log(\"We share to single players\")\r\n              setCardStore().then(()=>{\r\n                setCanShare(true)\r\n              })\r\n              setPlayerTurns(\"me\")\r\n              setHasGameEnd(false)\r\n          }\r\n        },2000)\r\n      }\r\n\r\n    },[hasGameEnd])\r\n\r\n    const sendCardStoreToRemote = useRef(function(){\r\n\r\n      const [hostCardStore,remoteCardStore] = cardsForRemoteAndHost()\r\n\r\n      socket.on(\"opp-connected\",(message)=>{\r\n          \r\n          setMultiConn(true)\r\n          console.log(message)\r\n\r\n          socket.emit(\"send-cards-to-remote\",remoteCardStore)\r\n\r\n          socket.on(\"remote-receive-cards\",message=>{\r\n             console.log(message)\r\n\r\n             setCardStore(hostCardStore).then(()=>{\r\n                setCanShare(true)\r\n                setPlayerTurns(\"me\")\r\n             })\r\n          })\r\n      })\r\n\r\n      // console.log(localCardStore)\r\n  })\r\n\r\n  const receiveCardStoreFromHost = useRef(function(){\r\n\r\n      socket.on(\"send-cards-to-remote\",remoteCardStore=>{\r\n          console.log(\"Cardstore sent by host...\")\r\n          console.log(remoteCardStore)\r\n\r\n          socket.emit(\"remote-receive-cards\",\"We received the cardstore...\")\r\n\r\n          setCardStore(remoteCardStore).then(()=>{\r\n            setCanShare(true)\r\n            setHasGameEnd(false)\r\n            setPlayerTurns(\"otherPlayer\")\r\n          })\r\n      })\r\n  })\r\n\r\n   function cardsForRemoteAndHost(){\r\n       \r\n    let localCardStore = initCardObj()\r\n\r\n    let cardStoreForRemote = [...localCardStore.slice(0,localCardStore.length - 10),\r\n                         ...localCardStore.slice(localCardStore.length - 5,localCardStore.length),\r\n                         ...localCardStore.slice(localCardStore.length - 10,localCardStore.length - 5)]\r\n\r\n     return [localCardStore,cardStoreForRemote]\r\n\r\n   }\r\n\r\n    return (\r\n      <>\r\n       <div className={playGroundStyle}>\r\n         <Score/>\r\n         <CardHolder type=\"otherPlayer\" isFront={false}/>\r\n         <CardStore mode={gameMode}/>\r\n         <PlayArea mode={gameMode}/>   \r\n         <CardHolder type=\"me\" mode={gameMode} isFront={true}/>\r\n         {showCardPicker && <CardPicker/>}\r\n\r\n         { !multiConn && isHost === \"host\" && <section>\r\n              <p>Your room id is : <b><big>{socketId}</big></b></p>\r\n             {<p>Copy and send this id to the other player</p>} \r\n            </section>\r\n            }\r\n       </div>\r\n       <Alert value={alertMessage}/>\r\n      </>\r\n    )\r\n}\r\n","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\contexts\\cardContext.js",[],"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\cardStore.js",[],"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\playArea.js",["67"],"import {useContext,useRef,useEffect} from \"react\"\r\nimport {CardContext} from \"../contexts/cardContext\"\r\nimport Card from \"./card\"\r\nimport {playAreaStyle} from \"../css/playground.module.css\"\r\n\r\nexport default function PlayArea()\r\n{\r\n    const {gameState} = useContext(CardContext)\r\n\r\n    const cardPossessed = useRef([])\r\n\r\n    const currentCardObj  = gameState.playArea[gameState.playArea.length - 1]\r\n\r\n    useEffect(()=>{\r\n        cardPossessed.current = gameState.playArea.map((obj)=> obj.id)\r\n\r\n        // console.log(gameState.playArea)\r\n\r\n        // console.log(cardPossessed.current)\r\n    })\r\n\r\n    return (\r\n        <div className={playAreaStyle}>\r\n            {/* { currentCardObj &&\r\n                                <Card key={Math.random()} \r\n                                 type=\"playarea\" isFront={true}\r\n                                 shouldAnimate={!cardPossessed.current.includes(currentCardObj.id)}\r\n                                cardObj ={currentCardObj} left ={0} \r\n                                top={0} playCard={()=>{}}/>\r\n            } */}\r\n\r\n            {\r\n                gameState.playArea.map(cardObj=>(\r\n                    <Card key={Math.random()} \r\n                    type=\"playarea\" isFront={true}\r\n                    shouldAnimate={!cardPossessed.current.includes(cardObj.id)}\r\n                   cardObj ={cardObj} left ={0} \r\n                   top={0} playCard={()=>{}}/>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\cardHolder.js",["68"],"import {cardHolderStyle} from \"../css/playground.module.css\"\r\nimport Card from \"./card\"\r\nimport {CardContext} from \"../contexts/cardContext\"\r\nimport {useContext,useEffect,useRef} from \"react\"\r\nimport UTILS from \"../utils/utils\"\r\n\r\nexport default function CardHolder({type,isFront}){\r\n\r\n    const {gameState,hasGameEnd,playCard,penalty,\r\n           setPenalty,pickACard,playerTurns,setPickACardCounter,\r\n           gameMode,setPlayerTurns,cardMustPlay,setCardMustPlay,setAlertMessage} = useContext(CardContext)\r\n\r\n    const cardPossessed = useRef([])\r\n\r\n    const cardObjs = type === \"otherPlayer\" ? gameState.otherPlayer : gameState.me\r\n\r\n    // console.log(cardObjs)\r\n\r\n    const cardHolderObjRef = useRef()\r\n\r\n    let addStyle = {\r\n        top:type === \"otherPlayer\" ? \"0\" : null,\r\n        bottom:type === \"me\" ? \"0\" : null\r\n    }\r\n\r\n    const AI = new UTILS.AI(gameState,playerTurns,setPlayerTurns,playCard,\r\n               pickACard,penalty,setPenalty,setPickACardCounter,cardMustPlay,setCardMustPlay,setAlertMessage)\r\n\r\n    useEffect(()=>{\r\n        cardPossessed.current = cardObjs.map((obj)=> obj.id)\r\n\r\n        if(type === \"otherPlayer\" && playerTurns === \"otherPlayer\" && gameMode === \"single player\" && hasGameEnd !== true){\r\n            AI.play()\r\n        }\r\n\r\n        if(gameState.otherPlayer.length === 2 && gameState.playArea.length){\r\n            setAlertMessage(\"AI : semi last card\")\r\n        }\r\n        else if(gameState.otherPlayer.length === 1 && gameState.playArea.length){\r\n            setAlertMessage(\"AI : Last card\")\r\n        }\r\n\r\n    },[cardObjs,gameMode,playerTurns,type])\r\n\r\n    // console.log(cardObjs)\r\n\r\n    useEffect(()=>{\r\n       \r\n        let s = setTimeout(()=>{\r\n            \r\n            cardHolderObjRef.current.addEventListener(\"mouseover\",()=>{\r\n                cardHolderObjRef.current.style.overflow = \"auto\"\r\n            })\r\n        },5000)\r\n\r\n        return ()=>{\r\n           clearTimeout(s);\r\n        }\r\n    },[])\r\n\r\n    return (\r\n        <div className={cardHolderStyle} style={addStyle} id={type} ref={cardHolderObjRef}>\r\n           {\r\n               cardObjs.length ? cardObjs.map((cardObj,i)=>{\r\n                return <Card left={i * 15 + 3} top={5} id={cardObj?.id} isFront={isFront}\r\n                             width ={10} key={Math.random()} \r\n                             shouldAnimate={!cardPossessed.current?.includes(cardObj?.id)}\r\n                             cardObj = {cardObj} playCard={playCard} type ={type}/>\r\n               }) : null\r\n\r\n           }\r\n        </div>\r\n\r\n        // i * 15 + 2\r\n    )\r\n}","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\utils\\utils.js",[],"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\card.js",["69","70"],"import {cardStyle,cardStyleTopNum,cardStyleBottomNum,cardStyleHover} from \"../css/playground.module.css\"\r\nimport {useCallback,useRef,useContext} from \"react\"\r\nimport {CardContext} from \"../contexts/cardContext\"\r\nimport {SocketContext} from \"../contexts/socketContext\"\r\nimport generalImg from \"../img/20_img.jpg\"\r\nimport circleImg from \"../img/circle_img.jpg\"\r\nimport triangleImg from \"../img/triangle_img.jpg\"\r\nimport squareImg from \"../img/square_img.jpg\"\r\nimport starImg from \"../img/star_img.jpg\"\r\nimport crossImg from \"../img/cross_img.jpg\"\r\nimport cardBackImg from \"../img/card_back_img.jpg\"\r\n\r\n\r\nexport default function Card({width,left,top,cardObj,playCard,type,isFront,shouldAnimate})\r\n{\r\n    const cardRef = useRef()\r\n\r\n    const {playerTurns,hasGameEnd,cardMustPlay,setCardMustPlay,setShowCardPicker,setPlayerTurns,\r\n          pickACardCounter,setPenalty,gameState,setAlertMessage} = useContext(CardContext)\r\n\r\n    const {socket} = useContext(SocketContext)\r\n\r\n    let computedImgIcon = \"\"\r\n\r\n    switch(cardObj.icon){\r\n      case \"crosses\":\r\n        computedImgIcon = crossImg\r\n        break\r\n      case \"squares\":\r\n        computedImgIcon = squareImg\r\n        break\r\n      case \"triangle\":\r\n        computedImgIcon = triangleImg\r\n        break\r\n      case \"stars\":\r\n        computedImgIcon = starImg\r\n        break\r\n      case \"circle\":\r\n        computedImgIcon = circleImg\r\n        break\r\n     default:\r\n        computedImgIcon = generalImg\r\n    }\r\n\r\n     \r\n    const prevPlayedCard = gameState.playArea[gameState.playArea.length - 1]\r\n\r\n    const localStyle = {\r\n      left:left + \"%\",\r\n      width:width + \"%\",\r\n      top:top + \"%\",\r\n      animation:`move${cardObj.id} 0.2s 1 linear`,\r\n      // zIndex:1000\r\n    }\r\n\r\n    // if(type === \"first\") console.log(shouldAnimate)\r\n\r\n    const addCardAnimation = useCallback((styleId,cssRule)=>\r\n    {\r\n      let style = document.createElement(\"style\")\r\n      style.id = styleId\r\n      style.innerText = cssRule\r\n\r\n      document.head.appendChild(style)\r\n\r\n      setTimeout(()=>{\r\n          document.head.querySelector(`style#${styleId}`).remove()\r\n      },200)\r\n    },[])\r\n\r\n      switch(type){\r\n        case \"otherPlayer\":\r\n          if(shouldAnimate)\r\n            addCardAnimation(cardObj.id,`@keyframes move${cardObj.id}\r\n                                        { from {top:200%;left:90%;z-index:100;} \r\n                                          to{top:${top}%;left:${left}%;}\r\n                                        }`)\r\n          break\r\n        case \"me\":\r\n          if(shouldAnimate)\r\n            addCardAnimation(cardObj.id,`@keyframes move${cardObj.id}\r\n                                         { from {top:-200%;left:90%;z-index:100;} \r\n                                           to{top:${top}%;left:${left}%;}\r\n                                          }`)\r\n          break\r\n        case \"playarea\":\r\n          if(shouldAnimate)\r\n            addCardAnimation(cardObj.id,`\r\n                              @keyframes move${cardObj.id}\r\n                              { from {top:${cardObj.type === \"me\" ? \"200%\":\"-200%\"};left:${cardObj.initialLeft * 10 - 450}%;z-index:100;} \r\n                                to{top:${top}%;left:${left}%;}\r\n                              }`)\r\n            break\r\n        default:\r\n  \r\n      }\r\n\r\n    function playThisCard()\r\n    {\r\n      if(hasGameEnd) return\r\n\r\n      if(type !== \"me\") return\r\n\r\n      console.log(pickACardCounter)\r\n\r\n      switch(pickACardCounter){\r\n        case 2:\r\n          return setAlertMessage(\"You have to pick 2 card from the stack\")\r\n        case 1:\r\n          return setAlertMessage(\"You have to pick one more card from the stack\")\r\n        case -1:\r\n          return setAlertMessage(\"Hold on...\")\r\n        default:\r\n      }\r\n\r\n      if(playerTurns !== type){\r\n        setAlertMessage(\"Not your turn\")\r\n        return\r\n      }\r\n      \r\n      if(cardMustPlay && cardObj.icon !== \"whot\"){\r\n        if(cardObj.icon !== cardMustPlay){\r\n          setAlertMessage(`You must play ${cardMustPlay}`)\r\n          return\r\n        }\r\n      }\r\n      else if(prevPlayedCard){\r\n        if((prevPlayedCard.icon !== cardObj.icon && prevPlayedCard.cardNum !== cardObj.cardNum) && cardObj.icon !== \"whot\")\r\n        {\r\n          setAlertMessage(\"Card do not match..\")\r\n          return\r\n        }\r\n      }\r\n\r\n      let newCardObj = {...cardObj,type,initialLeft:left}\r\n\r\n      switch(newCardObj.cardNum){\r\n        case 1:\r\n        case 8:\r\n          if(Object.keys(socket).length){\r\n              socket.emit(\"update-penalty\",{from:\"me\",to:\"otherPlayer\",what:\"Hold on\"})\r\n              socket.emit(\"card-played\",newCardObj)\r\n          }\r\n          setPenalty({from:\"me\",to:\"otherPlayer\",what:\"Hold on\"})\r\n          playCard(type,newCardObj)\r\n          setCardMustPlay(\"\")\r\n          break\r\n        case 2:\r\n          if(Object.keys(socket).length) \r\n          {\r\n              socket.emit(\"update-penalty\",{from:\"me\",to:\"otherPlayer\",what:\"Pick two\"})\r\n              socket.emit(\"card-played\",newCardObj)\r\n              socket.emit(\"switch-turn\",\"me\")\r\n          }\r\n          playCard(type,newCardObj)\r\n          setPlayerTurns(\"otherPlayer\")\r\n          setPenalty({from:\"me\",to:\"otherPlayer\",what:\"Pick two\"})\r\n          setCardMustPlay(\"\")\r\n          break\r\n        case 14:\r\n          if(Object.keys(socket).length){\r\n              socket.emit(\"update-penalty\",{from:\"me\",to:\"otherPlayer\",what:\"Go to market\"})\r\n              socket.emit(\"card-played\",newCardObj)\r\n              socket.emit(\"switch-turn\",\"me\")\r\n          }\r\n          playCard(type,newCardObj)\r\n          setPlayerTurns(\"otherPlayer\")\r\n          setPenalty({from:\"me\",to:\"otherPlayer\",what:\"Go to market\"})\r\n          setCardMustPlay(\"\")\r\n          break\r\n        case 20:\r\n          if(Object.keys(socket).length){\r\n            socket.emit(\"card-played\",newCardObj)\r\n            socket.emit(\"switch-turn\",\"me\")\r\n          }\r\n          playCard(type,newCardObj)\r\n          if(gameState.me.length > 1) setShowCardPicker(true)\r\n          break \r\n        default:\r\n          if(Object.keys(socket).length){\r\n            socket.emit(\"card-played\",newCardObj)\r\n            socket.emit(\"switch-turn\",\"me\")\r\n            socket.emit(\"update-penalty\",{from:\"\",to:\"\",what:\"\"})\r\n            socket.emit(\"set-remote-counter\",0)\r\n          }\r\n          playCard(type,newCardObj)\r\n          setPenalty({from:\"\",to:\"\",what:\"\"})\r\n          setPlayerTurns(\"otherPlayer\")\r\n          setCardMustPlay(\"\")\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div className={` ${cardStyle} ${type === \"me\" && cardStyleHover}`} onClick={playThisCard} style={localStyle} ref={cardRef}>\r\n        { isFront &&\r\n          <div>\r\n            <img src={computedImgIcon}/>\r\n            <span className={cardStyleTopNum}>{cardObj?.cardNum}</span>\r\n            <span className={cardStyleBottomNum}>{cardObj?.cardNum}</span>\r\n          </div>\r\n        }\r\n\r\n         { !isFront && <img src={cardBackImg}/> }\r\n        </div>\r\n    )\r\n}","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\home.js",[],"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\contexts\\socketContext.js",["71","72","73","74"],"import {createContext} from \"react\"\r\nimport {useContext,useState,useEffect} from \"react\"\r\nimport {CardContext} from \"../contexts/cardContext\"\r\nimport io from \"socket.io-client\"\r\n\r\n\r\nexport const SocketContext = createContext()\r\n\r\nconst URL = process.env.REACT_APP_MODE === \"development\" ? 'http://localhost:5000' : \"/\"\r\n\r\nexport default function SocketContextProvider({children}){\r\n    \r\n    const [socket,setSocket] = useState({})\r\n\r\n    const [isHost,setIsHost] = useState(null)\r\n\r\n    const [socketId,setSocketId] = useState(null)\r\n    const {gameMode,setPenalty,setCardMustPlay,playCard,setPickACardCounter, \r\n           pickRemoteCard,setPlayerTurns,setHasGameEnd,setScores,unSetGameState} = useContext(CardContext)\r\n\r\n    useEffect(()=>{\r\n\r\n        if(gameMode === \"multi-player\" && socketId){\r\n            setSocket(io.connect(URL,{query:{id:socketId}}))\r\n        }\r\n\r\n    },[gameMode,socketId])\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n         if(!Object.keys(socket).length) return\r\n\r\n         socket.on(\"card-played\",(newCardObj)=>{\r\n\r\n            newCardObj.type = \"otherPlayer\"\r\n            // newCardObj.initialLeft = -newCardObj.initialLeft\r\n\r\n            playCard(\"otherPlayer\",newCardObj)\r\n\r\n         })\r\n\r\n         socket.on(\"switch-turn\",myTurn=>{\r\n            setPlayerTurns(myTurn)\r\n            console.log(\"Called...\")\r\n         })\r\n\r\n         socket.on(\"remote-pick-card\",()=>{\r\n           pickRemoteCard()\r\n         })\r\n\r\n         socket.on(\"update-penalty\",({what})=>{\r\n            console.log(\"Penalty set\")\r\n            if(what){\r\n                setPenalty({from:\"otherPlayer\",to:\"me\",what})\r\n            }\r\n            else{\r\n                setPenalty({from:\"\",to:\"\",what}) \r\n            }\r\n         })\r\n\r\n         socket.on(\"set-remote-counter\",(counter)=>{\r\n            setPickACardCounter(counter)\r\n         })\r\n\r\n         socket.on(\"card-must-play\",cardMustPlay=>{\r\n            setCardMustPlay(cardMustPlay)\r\n\r\n            console.log(\"Give me \",cardMustPlay)\r\n         })\r\n\r\n        //  socket.on(\"game-ended\",bValue=>{\r\n        //     setHasGameEnd(bValue)\r\n        //  })\r\n\r\n        //  socket.on(\"unset-gamestate\",(message)=>{\r\n        //     unSetGameState()\r\n        //  })\r\n\r\n        //  socket.on(\"update-scores\",(scores)=>{\r\n        //     setScores(prevScores=>{\r\n        //         let newScores = [...prevScores].map((newScore,i)=> newScore + scores[i])\r\n\r\n        //         return newScores\r\n        //     })\r\n        //  })\r\n\r\n         return ()=>{\r\n             if(Object.keys(socket).length){\r\n                 socket.off(\"card-played\",()=>{})\r\n                 socket.off(\"switch-turn\",()=>{})\r\n                 socket.off(\"remote-pick-card\",()=>{})\r\n                 socket.off(\"card-must-play\",()=>{})\r\n                 socket.off(\"game-ended\",()=>{})\r\n                 socket.off(\"unset-gamestate\",()=>{})\r\n             }\r\n         }\r\n\r\n    },[socket])\r\n\r\n\r\n    return (\r\n        <SocketContext.Provider value={{socketId,socket,isHost,setIsHost,setSocketId}}>\r\n           {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}","C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\cardPicker.js",[],"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\score.js",[],"C:\\Users\\dell\\Documents\\WEB\\COMBINED\\the_whot_game\\client\\src\\components\\alert.js",["75"],"import {alertStyle} from \"../css/playground.module.css\"\r\nimport {useRef,useEffect,useContext} from \"react\"\r\nimport {CardContext} from \"../contexts/cardContext\"\r\n\r\n\r\nexport default function Alert()\r\n{\r\n    const alertRefObj = useRef()\r\n    const {alertMessage,setAlertMessage} = useContext(CardContext)\r\n\r\n    useEffect(()=>{\r\n      \r\n      if(!alertMessage) return \r\n\r\n      let s1 = setTimeout(()=>{\r\n        alertRefObj.current.style.right = \"0\"  \r\n      },1000)\r\n\r\n      let s2 = setTimeout(()=>{\r\n        alertRefObj.current.style.right = \"-25%\"\r\n        setAlertMessage(\"\")\r\n      },5000)\r\n\r\n      return ()=>{\r\n          clearTimeout(s1)\r\n          clearTimeout(s2)\r\n      }\r\n\r\n    },[alertMessage])\r\n\r\n    return (\r\n        <main className={alertStyle} ref={alertRefObj}>\r\n           {alertMessage}\r\n        </main>\r\n    )\r\n}",{"ruleId":"76","severity":1,"message":"77","line":49,"column":7,"nodeType":"78","endLine":49,"endColumn":24,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":89,"column":5,"nodeType":"78","endLine":89,"endColumn":16,"suggestions":"81"},{"ruleId":"76","severity":1,"message":"82","line":128,"column":7,"nodeType":"78","endLine":128,"endColumn":19,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":12,"column":11,"nodeType":"86","messageId":"87","endLine":12,"endColumn":25},{"ruleId":"76","severity":1,"message":"88","line":43,"column":7,"nodeType":"78","endLine":43,"endColumn":43,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":197,"column":13,"nodeType":"92","endLine":197,"endColumn":41},{"ruleId":"90","severity":1,"message":"91","line":203,"column":24,"nodeType":"92","endLine":203,"endColumn":48},{"ruleId":"84","severity":1,"message":"93","line":19,"column":42,"nodeType":"86","messageId":"87","endLine":19,"endColumn":55},{"ruleId":"84","severity":1,"message":"94","line":19,"column":56,"nodeType":"86","messageId":"87","endLine":19,"endColumn":65},{"ruleId":"84","severity":1,"message":"95","line":19,"column":66,"nodeType":"86","messageId":"87","endLine":19,"endColumn":80},{"ruleId":"76","severity":1,"message":"96","line":99,"column":7,"nodeType":"78","endLine":99,"endColumn":15,"suggestions":"97"},{"ruleId":"76","severity":1,"message":"98","line":29,"column":7,"nodeType":"78","endLine":29,"endColumn":21,"suggestions":"99"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCanShare', 'setCardStore', and 'unSetGameState'. Either include them or remove the dependency array.","ArrayExpression",["100"],"React Hook useEffect has missing dependencies: 'setHasGameEnd', 'setScores', and 'unSetGameState'. Either include them or remove the dependency array.",["101"],"React Hook useEffect has missing dependencies: 'cardsForRemoteAndHost', 'gameMode', 'isHost', 'setCanShare', 'setCardStore', 'setHasGameEnd', 'setPlayerTurns', and 'socket'. Either include them or remove the dependency array.",["102"],"no-unused-vars","'currentCardObj' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'AI', 'gameState.otherPlayer.length', 'gameState.playArea.length', 'hasGameEnd', and 'setAlertMessage'. Either include them or remove the dependency array.",["103"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setHasGameEnd' is assigned a value but never used.","'setScores' is assigned a value but never used.","'unSetGameState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'pickRemoteCard', 'playCard', 'setCardMustPlay', 'setPenalty', 'setPickACardCounter', and 'setPlayerTurns'. Either include them or remove the dependency array.",["104"],"React Hook useEffect has a missing dependency: 'setAlertMessage'. Either include it or remove the dependency array.",["105"],{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [isHost, gameMode, setCardStore, setCanShare, unSetGameState]",{"range":"118","text":"119"},"Update the dependencies array to be: [gameState, setHasGameEnd, setScores, unSetGameState]",{"range":"120","text":"121"},"Update the dependencies array to be: [cardsForRemoteAndHost, gameMode, hasGameEnd, isHost, setCanShare, setCardStore, setHasGameEnd, setPlayerTurns, socket]",{"range":"122","text":"123"},"Update the dependencies array to be: [AI, cardObjs, gameMode, gameState.otherPlayer.length, gameState.playArea.length, hasGameEnd, playerTurns, setAlertMessage, type]",{"range":"124","text":"125"},"Update the dependencies array to be: [pickRemoteCard, playCard, setCardMustPlay, setPenalty, setPickACardCounter, setPlayerTurns, socket]",{"range":"126","text":"127"},"Update the dependencies array to be: [alertMessage, setAlertMessage]",{"range":"128","text":"129"},[1493,1510],"[isHost, gameMode, setCardStore, setCanShare, unSetGameState]",[2526,2537],"[gameState, setHasGameEnd, setScores, unSetGameState]",[3641,3653],"[cardsForRemoteAndHost, gameMode, hasGameEnd, isHost, setCanShare, setCardStore, setHasGameEnd, setPlayerTurns, socket]",[1561,1597],"[AI, cardObjs, gameMode, gameState.otherPlayer.length, gameState.playArea.length, hasGameEnd, playerTurns, setAlertMessage, type]",[2886,2894],"[pickRemoteCard, playCard, setCardMustPlay, setPenalty, setPickACardCounter, setPlayerTurns, socket]",[690,704],"[alertMessage, setAlertMessage]"]